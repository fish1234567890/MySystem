<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	 <!-- 
	 	1.配置数据源   默认数据源没有事务
	  -->
	    <!-- 阿里 druid 数据库连接池 -->
	    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
	         <property name="url" value="${datasource.url}" />  
	         <property name="driverClassName" value="${datasource.driverClassName}" /> 
	         <property name="username" value="${datasource.username}" />  
	         <property name="password" value="${datasource.password}" /> 
	          
	         <property name="filters" value="${druid.filters}" />  
	         <property name="maxActive" value="${druid.maxActive}" />
	         <property name="initialSize" value="${druid.initialSize}" />
	         <property name="maxWait" value="${druid.maxWait}" />
	         <property name="minIdle" value="${druid.minIdle}" />  
	         <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
	         <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
	         <property name="validationQuery" value="${druid.validationQuery}" />  
	         <property name="testWhileIdle" value="${druid.testWhileIdle}" />  
	         <property name="testOnBorrow" value="${druid.testOnBorrow}" />  
	         <property name="testOnReturn" value="${druid.testOnReturn}" />  
	         <property name="maxOpenPreparedStatements" value="${druid.maxOpenPreparedStatements}" />
	         <property name="removeAbandoned" value="${druid.removeAbandoned}" />
	         <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
	         <property name="logAbandoned" value="${druid.logAbandoned}" />
	         <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
	    </bean >
	  
	  <!-- 
	  	2.mybatis  
	  		sqlsessionfactorybean 加载mybatis资源信息
	   -->
	   <bean id="sqlSessionFactory" 
	         class="org.mybatis.spring.SqlSessionFactoryBean">
	        <!-- 注入数据源 -->
	   		<property name="dataSource" ref="dataSource"></property>
	   		<!-- 
	   			mybatis使用实体类时创建别名
	   			规则  去除包结构  输出类名即可
	   			 例如 com.etoak.bean.User 
	   			    原名输出  User
	   			    类名全部小写输出  user
	   			    
	   			注意事项typeAliasesPackage不能使用通配符 *
	   		 -->
	   	 	<property name="typeAliasesPackage" 
	   	 				value="com.etoak.modules"></property>
	   	    <!-- mybatis加载 sql配置文件 -->
	   	    <property name="mapperLocations">
	   	    	<array>
	   	    		<value>
	   	    			<!-- **表示所有的 -->
	   	    			classpath:com/etoak/**/mapper/*.xml
	   	    		</value>
	   	    	</array>
	   	    </property>
	   </bean>
	  
	   <!-- 
	   	3.扫描接口创建mapper对象
	    -->
	    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	         <!-- 
	         		sqlSessionFactoryBeanName可以省略 
	         		省略时 匹配类型SqlSessionFactory 默认找sqlsessionfactorybean对象 
	         		不省略时 匹配之前创建的SqlSessionFactory的id (也就是value)
	         -->
	    	<!-- 获取sqlsessionfactory对象  
	    		<property name="sqlSessionFactoryBeanName" 
	    				value="sqlSessionFactory"></property> -->
	    				
	    	<!-- 扫描接口 创建对象 只找接口 -->
	    	<property name="basePackage" 
	    			value="com.etoak.**.mapper"></property>
	        <!-- 接口需要使用Repository注解才会扫描对象   -->
	        <property name="annotationClass" 
	                value="org.springframework.stereotype.Repository"></property>
	    </bean>
	    
	    <!-- 
	    	4.配置事务管理器
	     -->
	     <bean id="tx"
	           class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	     		
	     		<property name="dataSource" 
	     				ref="dataSource"></property>
	     			
	     </bean>
	     
	     <!-- 
	     	5.声明式事务 注解
	      -->
	     <tx:annotation-driven transaction-manager="tx"
	                           proxy-target-class="true" />
	     
	  
</beans>